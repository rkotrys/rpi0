import time, math,sys,sched
import subprocess as proc
import LCD_1in44
import LCD_Config

from PIL import Image,ImageDraw,ImageFont,ImageColor,ImageFilter

class menu:
    self.state  = []

    def __init__(self):
        self.state.append( 
class clock:
    images = "images/"
    baksnames = [ "z1b.bmp","z1w.bmp","z2.bmp","z2b.bmp","z3w.bmp","z3b.bmp","z4.bmp","z6.bmp" ] 
    backs = []
    iconsnames = [ "wifi18b.png", "wifi20.png", "eth_on_18.png", "eth_off_18.png" ]
    icons = []
    
    def __init__(self,kbd):
        self.sheduler = sched.scheduler(time.time, time.sleep)
        self.ind = 0
        self.bcolor = []
        self.wifi = []
        self.go = True
        self.msg = ""
        self.info = ""
        self.showinfo = False
        self.kbd = kbd
        self.s_color = (255,0,0,255)
        self.m_color = (100,100,250,255)
        self.h_color = (100,100,250,255)
        for n in range(0,len(clock.baksnames)):
            clock.backs.append( Image.open( clock.images + clock.baksnames[n] ) )
            self.bcolor.append( clock.backs[n].getpixel( (1,1) )[2] )
        for n in range(0,len(clock.iconsnames)):
           clock.icons.append( Image.open( clock.images + clock.iconsnames[ n ] ) )
        self.font = ImageFont.truetype("./fonts/courbd.ttf", 28)
        self.font12 = ImageFont.truetype("./fonts/courbd.ttf", 12)        
           
        self.LCD = LCD_1in44.LCD()
        Lcd_ScanDir = LCD_1in44.SCAN_DIR_DFT  #SCAN_DIR_DFT = D2U_L2R
        self.LCD.LCD_Init(Lcd_ScanDir)
        self.LCD.LCD_Clear()
        
    def drawhands( self, t, r, image ):
        x = int(image.size[0]/2)
        y = int(image.size[1]/2)
        im = Image.new( "RGBA", image.size, (255,255,255,0) )
        dr = ImageDraw.Draw( im )
        dr.polygon( [(x-3,y), (x+3,y), (x+3,r[2]),(x-3,r[2])], fill = self.h_color, outline='#888' )
        h = t[0] if t[0]<13 else t[0]-12
        him = im.rotate( -(h*30+t[1]*0.5), Image.BICUBIC )
        im = Image.new( "RGBA", image.size, (255,255,255,0) )
        dr = ImageDraw.Draw( im )
        dr.polygon( [(x-2,y), (x+2,y), (x+2,r[1]), (x-2,r[1])], fill = self.h_color, outline='#888' )
        hmim =Image.alpha_composite( him, im.rotate( -(360*t[1])/60, Image.BICUBIC ) )
        im = Image.new( "RGBA", image.size, (255,255,255,0) )
        dr = ImageDraw.Draw( im )
        dr.line([ ( x, y ), ( x, r[0]+10)], fill = self.s_color, width = 2 )
        dr.line([ ( x-3, r[0]+10 ), ( x, r[0]), ( x+3, r[0]+10 ), ( x-3, r[0]+10 )], fill = self.s_color, width = 2 )
        dr.ellipse([x-7,y-7,x+7,y+7],fill=self.s_color,outline='#888')
        return Image.alpha_composite( hmim, im.rotate( -(360*t[2])/60, Image.BICUBIC ) )

    def nextbk( self, name, state ):
        if state=='UP':
            #print( "size:{} ind={}".format(len(clock.baks), self.ind) ) 
            if self.ind == len(clock.baksnames)-1:
                self.ind = 0
            else:
                self.ind += 1        

    def sysexit( self, name, state ):
        if state=='UP':
            print("EXIT!")
            self.go = False
            
    def sinfo(self, name, state ):
        if state == "UP":
            self.showinfo = False
        else:
            self.info = str(proc.check_output(['./showip', 'eth0'] ), encoding='utf-8').strip()
            self.info = self.info + u'\n' + str(proc.check_output(['./showip', 'wlan0'] ), encoding='utf-8').strip()
            self.info = self.info + u'\n' + str(proc.check_output(['./showmac', 'wlan0'] ), encoding='utf-8').strip()
            self.showinfo = True
            #print(self.info) 

    def runclock(self):
        if self.go:
            self.sheduler.enter(1,1,self.runclock)

        wlanip = str(proc.check_output(['./showip', 'wlan0'] ), encoding='utf-8').strip()
        ethip = str(proc.check_output(['./showip', 'eth0'] ), encoding='utf-8').strip()
        tm = time.localtime()
        image = clock.backs[self.ind].copy()
        im = Image.new( "RGBA", image.size, (255,255,255,255) )
        im.paste(image)
        draw = ImageDraw.Draw(im)
        im = Image.alpha_composite( im, self.drawhands( (tm[3],tm[4],tm[5]), (12, 18, 30), image ) )   
        draw = ImageDraw.Draw( im )            
            #self.drowtime( draw, h*5+int(tm[4]/12), 35, 5, (100,100,250) )
            #self.drowtime( draw, tm[4], 50, 4, (100,100,250) )
            #self.drowtime( draw, tm[5], 50, 2, (255,10,10) )
            
            #draw.ellipse( [(63-5, 63-5),(63+5, 63+5)],fill="RED") 
            #icon = Image.eval( self.wifi, lambda a: int( a / 1) )
            #mask = Image.eval( self.wifi.getchannel('B'), lambda a: 255 if a < 228 else 0 ) 
        if wlanip != "":
            if self.bcolor[self.ind] < 128:
                mask = Image.eval( clock.icons[0].getchannel('B'), lambda a: 255 if a > 50 else 0 ) 
                im.paste( clock.icons[0], (108,1), mask )
            else:
                mask = Image.eval( clock.icons[1].getchannel('B'), lambda a: 255 if a < 205 else 0 ) 
                im.paste( clock.icons[1], (108,1), mask )
        if ethip != "":
            im.paste( clock.icons[2], (1,1) )
        else:  
            im.paste( clock.icons[3], (1,1) )
        imtext = Image.new( "RGBA", image.size, (0,0,0,0) )
        drawtext = ImageDraw.Draw(imtext)            
        drawtext.rectangle([5,80,123,123], fill=(100,100,100,180), outline=(50,50,50,255), width=2)
        if self.showinfo:
           drawtext.multiline_text( (7,85), self.info, font=self.font12, fill=(0,255,0,220) )
        else:
           self.msg = str(proc.check_output( ['./showtemp'] ), encoding='utf-8')
           drawtext.text( (15,90), self.msg, font=self.font, fill=(0,255,0,220) )   
        if self.kbd.buttons['k3'] and self.kbd.buttons['enter']:
            draw.rectangle([0,0,127,127], fill=(0,0,0,255), outline=(50,50,50,255), width=3)
            draw.text( (30,50), 'DOWN', font=self.font, fill=(255,0,0,255) )   
            self.LCD.LCD_ShowImage( Image.alpha_composite(im,imtext),0,0)
            time.sleep(3)
            self.LCD.LCD_Clear()
            proc.run(["shutdown", "now"])
            time.sleep(3)
              
        self.LCD.LCD_ShowImage( Image.alpha_composite(im,imtext),0,0)
   
    
    def run(self):
        self.sheduler.enter(1,1,self.runclock)
        self.sheduler.run()
        while self.go:
            time.sleep(5)
        self.LCD.LCD_Clear()    
